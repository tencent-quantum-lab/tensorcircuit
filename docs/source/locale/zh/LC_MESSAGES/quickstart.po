# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, The TensorCircuit Authors
# This file is distributed under the same license as the tensorcircuit
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
msgid ""
msgstr ""
"Project-Id-Version:  tensorcircuit\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-07-14 15:43+0800\n"
"PO-Revision-Date: 2023-05-07 11:01+0800\n"
"Last-Translator: Xinghan Yang\n"
"Language: cn\n"
"Language-Team: Xinghan Yang\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"

#: ../../source/quickstart.rst:3
msgid "Quick Start"
msgstr "快速上手"

#: ../../source/quickstart.rst:6
msgid "Installation"
msgstr "安装"

#: ../../source/quickstart.rst:8
msgid "For x86 Linux,"
msgstr "x64 Linux"

#: ../../source/quickstart.rst:10
msgid "``pip install tensorcircuit``"
msgstr "``pip install tensorcircuit``"

#: ../../source/quickstart.rst:12
msgid ""
"is in general enough. Either pip from conda or other python env managers "
"is fine."
msgstr ""

#: ../../source/quickstart.rst:15
msgid ""
"Since there are many optional packages for various features, the users "
"may need to install more pip packages when required."
msgstr ""

#: ../../source/quickstart.rst:18
msgid "For Linux with Nvidia GPU,"
msgstr ""

#: ../../source/quickstart.rst:19
msgid ""
"please refer to the GPU aware installation guide of corresponding machine"
" learning frameworks: `TensorFlow "
"<https://www.tensorflow.org/install/gpu>`_, `Jax "
"<https://github.com/google/jax#pip-installation-gpu-cuda>`_, or `PyTorch "
"<https://pytorch.org/get-started/locally/>`_."
msgstr ""

#: ../../source/quickstart.rst:24
msgid "Docker is also recommended (especially Linux + Nvidia GPU setup):"
msgstr ""

#: ../../source/quickstart.rst:26
msgid ""
"``sudo docker run -it --network host --gpus all "
"tensorcircuit/tensorcircuit``."
msgstr ""

#: ../../source/quickstart.rst:28
msgid ""
"For more details on docker setup, please refer to `docker readme "
"<https://github.com/tencent-quantum-"
"lab/tensorcircuit/tree/master/docker>`_."
msgstr ""

#: ../../source/quickstart.rst:30
msgid ""
"For Windows, due to the lack of support for Jax, we recommend to use "
"docker or WSL, please refer to `TC via windows docker "
"<contribs/development_windows.html>`_ or `TC via WSL "
"<contribs/development_wsl2.html>`_."
msgstr ""

#: ../../source/quickstart.rst:32
msgid "For MacOS, please refer to `TC on Mac <contribs/development_Mac.html>`_."
msgstr "For MacOS, please refer to `在Mac上安装TC <contribs/development_Mac_cn.html>`_."

#: ../../source/quickstart.rst:34
msgid ""
"Overall, the installation of TensorCircuit is simple, since it is purely "
"in Python and hence very portable. As long as the users can take care of "
"the installation of ML frameworks on the corresponding system, "
"TensorCircuit will work as expected."
msgstr ""

#: ../../source/quickstart.rst:37
msgid ""
"To debug the installation issue or report bugs, please check the "
"environment information by ``tc.about()``."
msgstr ""

#: ../../source/quickstart.rst:40
msgid ""
"We also provide a nightly build of tensorcircuit via PyPI which can be "
"accessed by ``pip uninstall tensorcircuit``, then ``pip install "
"tensorcircuit-nightly``"
msgstr ""

#: ../../source/quickstart.rst:46
msgid "Circuit Object"
msgstr "电路对象"

#: ../../source/quickstart.rst:48
msgid "The basic object for TensorCircuit is ``tc.Circuit``."
msgstr "TensorCircuit的基本对象是 ``tc.Circuit``。"

#: ../../source/quickstart.rst:50
msgid "Initialize the circuit with the number of qubits ``c=tc.Circuit(n)``."
msgstr "用量子比特数(n) ``c=tc.Circuit(n)`` 来初始化电路。"

#: ../../source/quickstart.rst:52
msgid "**Input States:**"
msgstr "**输入状态:**"

#: ../../source/quickstart.rst:54
msgid ""
"The default input function for the circuit is :math:`\\vert 0^n "
"\\rangle`. One can change this to other wavefunctions by directly feeding"
" the inputs state vectors w: ``c=tc.Circuit(n, inputs=w)``."
msgstr ""
"电路的默认输入函数是 :math:`\\vert 0^n \\rangle` 。可以通过直接输入输入状态向量 w 将其更改为其他波函数: "
"``c=tc.Circuit(n, inputs=w)``。"

#: ../../source/quickstart.rst:56
msgid ""
"One can also feed matrix product states as input states for the circuit, "
"but we leave MPS/MPO usage for future sections."
msgstr "也可以将矩阵乘积状态作为电路的输入状态，但我们将矩阵乘积状态/矩阵乘积算子的使用留待后续讲解。"

#: ../../source/quickstart.rst:58
msgid "**Quantum Gates:**"
msgstr "**量子门:**"

#: ../../source/quickstart.rst:60
msgid ""
"We can apply gates on circuit objects. For example, using ``c.H(1)`` or "
"``c.rx(2, theta=0.2)``, we can apply Hadamard gate on qubit 1 (0-based) "
"or apply Rx gate on qubit 2 as :math:`e^{-i\\theta/2 X}`."
msgstr ""
"我们可以将门应用于电路对象。 例如，使用 ``c.H(1)`` 或 ``c.rx(2, theta=0.2)``，我们可以将 Hadamard "
"门应用于量子比特1 （基于0）或将 Rx 门应用于量子比特2 :math:`e^{-i\\theta/2 X}`。"

#: ../../source/quickstart.rst:62
msgid "The same rule also applies to multi-qubit gates, such as ``c.cnot(0, 1)``."
msgstr "同样的规则亦适用于多量子比特门，例如  ``c.cnot(0, 1)`` 。"

#: ../../source/quickstart.rst:64
msgid "There are also highly customizable gates, two instances are:"
msgstr "这些量子门也是高度可定制的，下面是两个例子"

#: ../../source/quickstart.rst:66
msgid ""
"``c.exp1(0, 1, unitary=m, theta=0.2)`` which is for the exponential gate "
":math:`e^{i\\theta m}` of any matrix m as long as :math:`m^2=1`."
msgstr ""
"``c.exp1(0, 1, unitary=m, theta=0.2)`` 用于任何矩阵 m 的指数门 :math:`e^{i\\theta "
"m}`，只要 m 满足 :math:`m^2=1`。"

#: ../../source/quickstart.rst:68
msgid ""
"``c.any(0, 1, unitary=m)`` which is for applying the unitary gate m on "
"the circuit."
msgstr "``c.any(0, 1, unitary=m)`` 在电路上作用任意的幺正量子门。"

#: ../../source/quickstart.rst:70
msgid "These two examples are flexible and support gates on any number of qubits."
msgstr "这两个例子很灵活，支持任意数量的量子比特上的门。"

#: ../../source/quickstart.rst:72
msgid "**Measurements and Expectations:**"
msgstr "**测量与期望**"

#: ../../source/quickstart.rst:74
msgid ""
"The most straightforward way to get the output from the circuit object is"
" by getting the output wavefunction in vector form as ``c.state()``."
msgstr "从电路对象中获取输出的最直接的方法是通过 ``c.state()`` 以向量形式获取输出波函数。"

#: ../../source/quickstart.rst:76
msgid ""
"For bitstring sampling, we have ``c.perfect_sampling()`` which returns "
"the bitstring and the corresponding probability amplitude."
msgstr "对于位串采样，我们有 ``c.perfect_sampling()``，它返回位串和相应的概率幅度。"

#: ../../source/quickstart.rst:78
msgid ""
"To measure part of the qubits, we can use ``c.measure(0, 1)``, if we want"
" to know the corresponding probability of the measurement output, try "
"``c.measure(0, 1, with_prob=True)``. The measure API is by default non-"
"jittable, but we also have a jittable version as ``c.measure_jit(0, 1)``."
msgstr ""
"要测量部分量子比特，我们可以使用 ``c.measure(0, 1)``，如果我们想知道测量的结果的对应概率，可以尝试 "
"``c.measure(0, 1, with_prob=True)``。 测量 API 在默认情况下是不可即时编译的 "
"，但我们也有一个可即时编译的版本，如 ``c.measure_jit(0, 1)``。"

#: ../../source/quickstart.rst:80
msgid ""
"The measurement and sampling utilize advanced algorithms based on "
"tensornetwork and thus require no knowledge or space for the full "
"wavefunction."
msgstr "测量和采样使用了基于张量网络的高级算法，因此不需要任何相关知识或者空间来获取全波函数。"

#: ../../source/quickstart.rst:82
msgid "See the example below:"
msgstr "请看下面的例子："

#: ../../source/quickstart.rst:100
msgid ""
"To compute expectation values for local observables, we have "
"``c.expectation([tc.gates.z(), [0]], [tc.gates.z(), [1]])`` for "
":math:`\\langle Z_0Z_1 \\rangle` or ``c.expectation([tc.gates.x(), "
"[0]])`` for :math:`\\langle X_0 \\rangle`."
msgstr ""
"为了计算局部可观察量的期望值，我们有 ``c.expectation([tc.gates.z(), [0]], [tc.gates.z(), "
"[1]])`` 对应的期望为 :math:`\\langle Z_0Z_1 \\rangle` 时，或 "
"``c.expectation([tc.gates.x(), [0]])`` 对应的期望为 :math:`\\langle X_0 "
"\\rangle`时."

#: ../../source/quickstart.rst:102
msgid ""
"This expectation API is rather flexible, as one can measure an m on "
"several qubits as ``c.expectation([m, [0, 1, 2]])``."
msgstr "因为可以在几个量子比特上测量一个 m，这种计算期望值的 API 相当灵活：``c.expectation([m, [0, 1, 2]])``。"

#: ../../source/quickstart.rst:104
msgid ""
"We can also extract the unitary matrix underlying the whole circuit as "
"follows:"
msgstr "我们还可以提取整个电路下面的幺正矩阵，如下所示："

#: ../../source/quickstart.rst:117
msgid "**Circuit Transformations:**"
msgstr "**电路可视化**"

#: ../../source/quickstart.rst:119
msgid ""
"We currently support transform ``tc.Circuit`` from and to Qiskit "
"``QuantumCircuit`` object."
msgstr "我们目前支持 ``tc.Circuit`` 与 Qiskit ``QuantumCircuit`` 对象之间的互相转换。"

#: ../../source/quickstart.rst:121
msgid ""
"Export to Qiskit (possible for further hardware experiment, compiling, "
"and visualization): ``c.to_qiskit()``."
msgstr "导出到 Qiskit（可能用于进一步的硬件实验、编译和可视化）：``c.to_qiskit()``。"

#: ../../source/quickstart.rst:123
msgid ""
"Import from Qiskit: ``c = tc.Circuit.from_qiskit(QuantumCircuit, n)``. "
"Parameterized Qiskit circuit is supported by passing the parameters to "
"the ``binding_parameters`` argument of the ``from_qiskit`` function, "
"similar to the ``assign_parameters`` function in Qiskit."
msgstr ""

#: ../../source/quickstart.rst:127
msgid "**Circuit Visualization:**"
msgstr "**电路可视化**"

#: ../../source/quickstart.rst:129
msgid ""
"``c.vis_tex()`` can generate tex code for circuit visualization based on "
"LaTeX `quantikz <https://arxiv.org/abs/1809.03842>`__ package."
msgstr ""
"``c.vis_tex()`` 可以基于  `quantikz <https://arxiv.org/abs/1809.03842>`__ "
"package 生成用于电路可视化的 tex 代码。"

#: ../../source/quickstart.rst:131
msgid ""
"There are also some automatic pipeline helper functions to directly "
"generate figures from tex code, but they require extra installations in "
"the environment."
msgstr "还有一些自动辅助函数可以直接从 tex 代码生成图形，但它们需要在环境中进行额外安装。"

#: ../../source/quickstart.rst:133
msgid ""
"``render_pdf(tex)`` function requires full installation of LaTeX locally."
" And in the Jupyter environment, we may prefer ``render_pdf(tex, "
"notebook=True)`` to return jpg figures, which further require wand "
"magicwand library installed, see `here <https://docs.wand-"
"py.org/en/latest/>`__."
msgstr ""
"``render_pdf(tex)`` 函数需要在本地完全安装 LaTeX。 在 Jupyter 环境中，我们可能会偏好 "
"``render_pdf(tex, notebook=True)`` 来返回 jpg 图形，这需要安装 wand magicwand 库，请参阅 "
"`这里 <https://docs.wand-py.org/en/latest/>`__ 。"

#: ../../source/quickstart.rst:135
msgid ""
"Or since we can transform ``tc.Circuit`` into QuantumCircuit easily, we "
"have a simple pipeline to first transform ``tc.Circuit`` into Qiskit and "
"then call the visualization built in Qiskit. Namely, we have ``c.draw()``"
" API."
msgstr ""
"从 Qiskit 导入：``c = tc.Circuit.from_qiskit(QuantumCircuit, n)`` "
"或者因为我们可以轻松地将 ``tc.Circuit`` 转换为 QuantumCircuit，我们有一个简单的管道来首先转换 "
"``tc.Circuit`` 为 Qiskit，然后调用 Qiskit 中内置的可视化。 也就是说，我们有 ``c.draw()`` API。"

#: ../../source/quickstart.rst:137
msgid "**Circuit Intermediate Representation:**"
msgstr "**电路中间表示:**"

#: ../../source/quickstart.rst:139
msgid ""
"TensorCircuit provides its own circuit IR as a python list of dicts. This"
" IR can be further utilized to run compiling, generate serialization "
"qasm, or render circuit figures."
msgstr "TensorCircuit 提供自己的中间表示是元素是字典的列表。此中间表示可进一步用于运行编译、生成序列化 qasm 或渲染电路图。"

#: ../../source/quickstart.rst:141
msgid ""
"The IR is given as a list, each element is a dict containing information "
"on one gate that is applied to the circuit. Note gate attr in the dict is"
" a python function that returns the gate's node."
msgstr ""
"中间表示以列表形式给出，每个元素都是一个字典，其中包含应用于电路的一个量子门的信息。 注意字典中的 gate atrr "
"实际上是一个返回此量子门的节点的 python 函数。"

#: ../../source/quickstart.rst:153
msgid "Programming Paradigm"
msgstr "编程范式"

#: ../../source/quickstart.rst:155
msgid ""
"The most common case and the most typical programming paradigm for "
"TensorCircuit are to evaluate the circuit output and the corresponding "
"quantum gradients, which is common in variational quantum algorithms."
msgstr "TensorCircuit 最常见的情况和最典型的编程范式是评估电路的输出以及相应的量子梯度，这在变分量子算法中很常见。"

#: ../../source/quickstart.rst:182
#, fuzzy
msgid ""
"Also for a non-quantum example (linear regression) demonstrating the "
"backend agnostic feature, variables with pytree support, AD/jit/vmap "
"usage, and variational optimization loops. Please refer to the example "
"script: `linear regression example <https://github.com/tencent-quantum-"
"lab/tensorcircuit/blob/master/examples/universal_lr.py>`_. This example "
"might be more friendly to the machine learning community since it is "
"purely classical while also showcasing the main features and paradigms of"
" tensorcircuit."
msgstr ""
"同样对于演示后端不可知特性的非量子示例（线性回归），pytree 支持变量、自动微分/即时编译/矢量并行化 用法和变分优化循环。请参考示例脚本: "
"`线性回归示例 <https://github.com/quclub/tensorcircuit-"
"dev/blob/master/examples/universal_lr.py>`_ 。 "
"这个例子可能对机器学习的用户更友好，因为它纯粹是经典的，同时也展示了 TensorCircuit 的主要特征和范式。"

#: ../../source/quickstart.rst:185
msgid ""
"If the user has no intention to maintain the application code in a "
"backend agnostic fashion, the API for ML frameworks can be more handily "
"used and interleaved with the TensorCircuit API."
msgstr ""
"如果用户无意以与后端无关的方式维护应用程序代码，则可以更方便地使用用于机器学习框架的 API 并将其与 TensorCircuit API "
"交替使用。"

#: ../../source/quickstart.rst:220
msgid "Automatic Differentiation, JIT, and Vectorized Parallelism"
msgstr "自动微分、即时编译和矢量化并行 "

#: ../../source/quickstart.rst:222
msgid ""
"For concepts of AD, JIT and VMAP, please refer to `Jax documentation "
"<https://jax.readthedocs.io/en/latest/jax-101/index.html>`__ ."
msgstr ""
"关于自动微分、即时编译和向量并行化，请参考 `Jax 文档 "
"<https://jax.readthedocs.io/en/latest/jax-101/index.html>`__ 。"

#: ../../source/quickstart.rst:224
msgid ""
"The related API design in TensorCircuit closely follows the functional "
"programming design pattern in Jax with some slight differences. So we "
"strongly recommend users learn some basics about Jax no matter which ML "
"backend they intend to use."
msgstr ""
"TensorCircuit 中的相关 API 设计与 Jax 中的函数式编程的设计模式密切相关，但是略有不同。因此，我们强烈建议用户学习一些有关 "
"Jax 的基础知识，无论他们打算使用哪种机器学习后端。"

#: ../../source/quickstart.rst:226
msgid "**AD Support:**"
msgstr "**自动微分支持**"

#: ../../source/quickstart.rst:228
msgid ""
"Gradients, vjps, jvps, natural gradients, Jacobians, and Hessians. AD is "
"the base for all modern machine learning libraries."
msgstr "梯度、矢量雅可比乘积、自然梯度、 Jacobian 矩阵和 Hessian 矩阵。自动微分是所有现代机器学习库的基础。"

#: ../../source/quickstart.rst:232
msgid "**JIT Support:**"
msgstr "**自动微分支持**"

#: ../../source/quickstart.rst:234
msgid ""
"Parameterized quantum circuits can run in a blink. Always use jit if the "
"circuit will get evaluations multiple times, it can greatly boost the "
"simulation with two or three order time reduction. But also be cautious, "
"users need to be familiar with jit, otherwise, the jitted function may "
"return unexpected results or recompile on every hit (wasting lots of "
"time). To learn more about the jit mechanism, one can refer to "
"documentation or blogs on ``tf.function`` or ``jax.jit``, though these "
"two still have subtle differences."
msgstr ""
"参数化的量子电路可以在瞬间完成运行。如果电路将得到多次运行，请始终使用即时编译，它可以大大提高仿真速度，减少两到三个数量级的运行时间。但也要小心，用户需要熟悉"
" 即时编译，否则，即时编译的函数可能会返回意外结果或每次在点击时都重新编译（浪费大量时间）。要了解更多关于即时编译机制的信息，可以参考关于 "
"``tf.function`` 或 ``jax.jit`` 的文档或博客，即使这两者仍然存在细微差别。"

#: ../../source/quickstart.rst:238
msgid "**VMAP Support:**"
msgstr "**自动微分支持**"

#: ../../source/quickstart.rst:240
msgid ""
"Inputs, parameters, measurements, circuit structures, and Monte Carlo "
"noise can all be evaluated in parallel. To learn more about vmap "
"mechanism, one can refer to documentation or blogs on "
"``tf.vectorized_map`` or ``jax.vmap``."
msgstr ""
"输入、参数、测量、电路结构、蒙特卡洛噪声都可以并行测算。 要了解有关矢量并行化机制的更多信息，可以参考 ``tf.vectorized_map``"
" 或 ``jax.vmap`` 上的文档或博客。"

#: ../../source/quickstart.rst:245
msgid "Backend Agnosticism"
msgstr "后端无关特性"

#: ../../source/quickstart.rst:247
msgid ""
"TensorCircuit supports TensorFlow, Jax, and PyTorch backends. We "
"recommend using TensorFlow or Jax backend since PyTorch lacks advanced "
"jit and vmap features."
msgstr ""
"TensorCircuit 支持 TensorFlow、Jax 和 PyTorch 后端。 我们建议使用 TensorFlow 或 Jax "
"后端，因为 PyTorch 缺乏高级 jit 和 vmap 功能。"

#: ../../source/quickstart.rst:249
msgid ""
"The backend can be set as ``K=tc.set_backend(\"jax\")`` and ``K`` is the "
"backend with a full set of APIs as a conventional ML framework, which can"
" also be accessed by ``tc.backend``."
msgstr ""
"后端可以设置为 ``K=tc.set_backend(\"jax\")`` ，``K``作为常规机器学习框架的全套API的后端，也可以通过``tc"
" .backend`` 被访问。"

#: ../../source/quickstart.rst:272
#, fuzzy
msgid ""
"The supported APIs in the backend come from two sources, one part is "
"implemented in `TensorNetwork package "
"<https://github.com/google/TensorNetwork/blob/master/tensornetwork/backends/abstract_backend.py>`__"
" and the other part is implemented in `TensorCircuit package "
"<modules.html#module-tensorcircuit.backends>`__. To see all the backend "
"agnostic APIs, try:"
msgstr ""
"在后端支持的 APIs 有两个来源 , 一个来自 `TensorNetwork "
"<https://github.com/google/TensorNetwork/blob/master/tensornetwork/backends/abstract_backend.py>`__"
" 另一个来自 `TensorCircuit package <modules.html#module-"
"tensorcircuit.backends>`__。"

#: ../../source/quickstart.rst:427
msgid "​"
msgstr ""

#: ../../source/quickstart.rst:430
msgid "Switch the Dtype"
msgstr "转换 dtype"

#: ../../source/quickstart.rst:432
msgid ""
"TensorCircuit supports simulation using 32/64 bit precession. The default"
" dtype is 32-bit as \"complex64\". Change this by "
"``tc.set_dtype(\"complex128\")``."
msgstr ""
"TensorCircuit 支持使用 32/64 bit 精确度的模拟。默认的 dtype 是 32-bit 的 "
"\"complex64\"。可以通过  ``tc.set_dtype(\"complex128\")`` 把 dtype 改为 \"complex"
" 128\" 。"

#: ../../source/quickstart.rst:435
msgid ""
"``tc.dtypestr`` always returns the current dtype string: either "
"\"complex64\" or \"complex128\"."
msgstr "``tc.dtypestr`` 总会返回当前的 dtype 字符串: 不是 \"complex64\" 就是 \"complex128\"."

#: ../../source/quickstart.rst:439
msgid "Setup the Contractor"
msgstr "设置 contractor"

#: ../../source/quickstart.rst:441
msgid ""
"TensorCircuit is a tensornetwork contraction-based quantum circuit "
"simulator. A contractor is for searching for the optimal contraction path"
" of the circuit tensornetwork."
msgstr "TensorCircuit 是一个基于张量网络收缩的量子电路模拟器。 contractor 用于搜索电路张量网络的最佳收缩路径。"

#: ../../source/quickstart.rst:443
msgid ""
"There are various advanced contractors provided by third-party packages, "
"such as `opt-einsum <https://github.com/dgasmith/opt_einsum>`__ and "
"`cotengra <https://github.com/jcmgray/cotengra>`__."
msgstr ""
"有各种第三方包提供的高级 contractor ，例如 `opt-einsum "
"<https://github.com/dgasmith/opt_einsum>`__ 和 `cotengra "
"<https://github.com/jcmgray/cotengra>`__ 。"

#: ../../source/quickstart.rst:445
msgid ""
"`opt-einsum` is shipped with TensorNetwork package. To use cotengra, one "
"needs to pip install it; kahypar is also recommended to install with "
"cotengra."
msgstr ""
"`opt-einsum` 随 TensorNetwork 软件包一起。如要使用 cotengra，则需要 pip 安装它； 还建议安装 "
"cotengra 随 kahypar 一起使用。"

#: ../../source/quickstart.rst:447
msgid "Some setup cases:"
msgstr "一些设置案例："

#: ../../source/quickstart.rst:473
#, fuzzy
msgid ""
"For advanced configurations on cotengra contractors, please refer to "
"cotengra `doc "
"<https://cotengra.readthedocs.io/en/latest/advanced.html>`__ and more "
"fancy examples can be found at `contractor tutorial <https://github.com"
"/tencent-quantum-lab/tensorcircuit-"
"tutorials/blob/master/tutorials/contractors.ipynb>`__."
msgstr ""
"有关 cotengra contractor 的高级配置，请参阅 cotengra `doc "
"<https://cotengra.readthedocs.io/en/latest/advanced.html>`__ 更多精彩示例在  "
"`contractor 教程 <https:// github.com/quclub/tensorcircuit-"
"tutorials/blob/master/tutorials/contractors.ipynb>`__."

#: ../../source/quickstart.rst:475
msgid "**Setup in Function or Context Level**"
msgstr "**函数和上下文级别的设置**"

#: ../../source/quickstart.rst:477
msgid ""
"Beside global level setup, we can also setup the backend, the dtype, and "
"the contractor at the function level or context manager level:"
msgstr "除了全局级别设置，我们还可以在函数级别或上下文管理器级别设置后端、dtype 和contractor："

#: ../../source/quickstart.rst:495
msgid "Noisy Circuit Simulation"
msgstr "噪声电路模拟"

#: ../../source/quickstart.rst:497
msgid "**Monte Carlo State Simulator:**"
msgstr "**蒙特卡洛态模拟器**"

#: ../../source/quickstart.rst:499
msgid ""
"For the Monte Carlo trajectory noise simulator, the unitary Kraus channel"
" can be handled easily. TensorCircuit also supports fully jittable and "
"differentiable general Kraus channel Monte Carlo simulation, though."
msgstr ""
"对于蒙特卡洛轨迹噪声模拟器，可以轻松处理幺正的 Kraus 通道。 不过，TensorCircuit 还支持完全可即时编译和可微分的通用 "
"Kraus 通道蒙特卡罗模拟。"

#: ../../source/quickstart.rst:526
msgid "**Density Matrix Simulator:**"
msgstr "**密度矩阵模拟器**"

#: ../../source/quickstart.rst:528
msgid ""
"Density matrix simulator ``tc.DMCircuit`` simulates the noise in a full "
"form, but takes twice qubits to do noiseless simulation. The API is the "
"same as ``tc.Circuit``."
msgstr "密度矩阵模拟器``tc.DMCircuit`` 以完整形式模拟噪声，但需要两倍的量子比特。API 与 ``tc.Circuit`` 基本相同。"

#: ../../source/quickstart.rst:547
msgid "**Experiment with quantum errors:**"
msgstr ""

#: ../../source/quickstart.rst:549
msgid "Multiple quantum errors can be added on circuit."
msgstr ""

#: ../../source/quickstart.rst:565
msgid "**Experiment with readout error:**"
msgstr ""

#: ../../source/quickstart.rst:567
msgid ""
"Readout error can be added in experiments for sampling and expectation "
"value calculation."
msgstr ""

#: ../../source/quickstart.rst:593
msgid "MPS and MPO"
msgstr "矩阵乘积状态和矩阵乘积算子"

#: ../../source/quickstart.rst:595
msgid ""
"TensorCircuit has its class for MPS and MPO originally defined in "
"TensorNetwork as ``tc.QuVector``, ``tc.QuOperator``."
msgstr ""
"TensorCircuit 有自己的 MPS 和 MPO 类，起初在 TensorNetwork 中定义为“tc.QuVector” 和 "
"“tc.QuOperator”。"

#: ../../source/quickstart.rst:597
msgid ""
"``tc.QuVector`` can be extracted from ``tc.Circuit`` as the tensor "
"network form for the output state (uncontracted) by ``c.quvector()``."
msgstr ""
"作为``c.quvector()`` 的输出状态（未收缩）的张量网络形式，``tc.QuVector`` 可以从``tc.Circuit`` "
"中提取。"

#: ../../source/quickstart.rst:599
msgid ""
"The QuVector forms a wavefunction w, which can also be fed into Circuit "
"as the inputs state as ``c=tc.Circuit(n, mps_inputs=w)``."
msgstr ""
"QuVector 形成一个波函数 w，它也可以作为 ``c=tc.Circuit(n, mps_inputs=w)`` 的输入状态输入到 "
"Circuit 中。"

#: ../../source/quickstart.rst:601
msgid "MPS as input state for circuit"
msgstr "MPS 作为电路的输入状态"

#: ../../source/quickstart.rst:603
msgid ""
"The MPS/QuVector representation of the input state has a more efficient "
"and compact form."
msgstr "输入状态的 MPS/QuVector 表示具有更高效和紧凑的形式。"

#: ../../source/quickstart.rst:615
msgid "MPS as (uncomputed) output state for circuit"
msgstr "MPS 作为电路的（未计算的）输出状态"

#: ../../source/quickstart.rst:617
msgid ""
"For example, a quick way to calculate the wavefunction overlap without "
"explicitly computing the state amplitude is given as below:"
msgstr "例如，在不显式计算状态幅度的情况下，计算波函数重叠的快速方法如下："

#: ../../source/quickstart.rst:634
msgid "MPO as the gate on the circuit"
msgstr "MPO 作为电路上的门"

#: ../../source/quickstart.rst:636
msgid ""
"Instead of a common quantum gate in matrix/node format, we can directly "
"apply a gate in MPO/QuOperator format."
msgstr "代替矩阵/节点格式的普通量子门，我们可以直接应用 MPO/QuOperator 格式的门。"

#: ../../source/quickstart.rst:647
msgid ""
"The representative gate defined in MPO format is the ``multicontrol`` "
"gate."
msgstr "以 MPO 格式定义的代表门是 ``multicontrol`` 门。"

#: ../../source/quickstart.rst:649
msgid "MPO as the operator for expectation evaluation on a circuit"
msgstr "MPO作为电路期望估测算子"

#: ../../source/quickstart.rst:651
msgid ""
"We can also measure operator expectation on the circuit output state "
"where the operator is in MPO/QuOperator format."
msgstr "我们还可以测量运算符对 MPO/QuOperator 格式的电路输出状态的期望。"

#: ../../source/quickstart.rst:663
msgid "Interfaces"
msgstr "接口"

#: ../../source/quickstart.rst:665
msgid "**PyTorch Interface to Hybrid with PyTorch Modules:**"
msgstr "**与 PyTorch 模块混合的 PyTorch 接口：**"

#: ../../source/quickstart.rst:667
msgid ""
"As we have mentioned in the backend section, the PyTorch backend may lack"
" advanced features. This doesn't mean we cannot hybrid the advanced "
"circuit module with PyTorch neural module. We can run the quantum "
"function on TensorFlow or Jax backend while wrapping it with a Torch "
"interface."
msgstr ""
"正如我们在后端部分提到的，PyTorch 后端可能缺少高级功能。 这并不意味着我们不能将高级量子电路模块与 PyTorch 神经模块混合。 "
"我们可以在 TensorFlow 或 Jax 后端运行量子函数，同时使用 Torch 接口包装它。 "

#: ../../source/quickstart.rst:694
msgid ""
"For a GPU/CPU, torch/tensorflow, quantum/classical hybrid machine "
"learning pipeline enabled by tensorcircuit, see `example script "
"<https://github.com/tencent-quantum-"
"lab/tensorcircuit/blob/master/examples/hybrid_gpu_pipeline.py>`__."
msgstr ""

#: ../../source/quickstart.rst:696
msgid ""
"There is also a more flexible torch interface that support static non-"
"tensor inputs as keyword arguments, which can be utilized as below:"
msgstr ""

#: ../../source/quickstart.rst:710
msgid ""
"We also provider wrapper of quantum function for torch module as "
":py:meth:`tensorcircuit.TorchLayer` alias to "
":py:meth:`tensorcircuit.torchnn.QuantumNet`."
msgstr ""

#: ../../source/quickstart.rst:712
msgid ""
"For ``TorchLayer``, ``use_interface=True`` is by default, which natively "
"allow the quantum function defined on other tensorcircuit backends, such "
"as jax or tf for speed consideration."
msgstr ""

#: ../../source/quickstart.rst:714
msgid ""
"``TorchLayer`` can process multiple input arguments as multiple function "
"inputs, following torch practice."
msgstr ""

#: ../../source/quickstart.rst:742
msgid "**TensorFlow interfaces:**"
msgstr ""

#: ../../source/quickstart.rst:744
msgid ""
"Similar rules apply similar as torch interface. The interface can even be"
" used within jit environment outside. See "
":py:meth:`tensorcircuit.interfaces.tensorflow.tensorflow_interface`."
msgstr ""

#: ../../source/quickstart.rst:747
msgid ""
"We also provider ``enable_dlpack=True`` option in torch and tf "
"interfaces, which allow the tensor transformation happen without memory "
"transfer via dlpack, higher version of tf or torch package required."
msgstr ""

#: ../../source/quickstart.rst:750
msgid ""
"We also provider wrapper of quantum function for keras layer as "
":py:meth:`tensorcircuit.KerasLayer` alias to "
":py:meth:`tensorcircuit.keras.KerasLayer`."
msgstr ""

#: ../../source/quickstart.rst:752
msgid ""
"``KerasLayer`` can process multiple input arguments with the input as a "
"dict, following the common keras practice, see example below."
msgstr ""

#: ../../source/quickstart.rst:774
msgid "**Scipy Interface to Utilize Scipy Optimizers:**"
msgstr "**使用 scipy接口使用scipy优化器：**"

#: ../../source/quickstart.rst:776
msgid ""
"Automatically transform quantum functions as scipy-compatible values and "
"grad functions as provided for scipy interface with ``jac=True``."
msgstr "为带有 jac=True 的 scipy 接口自动将量子函数转换为与 scipy 兼容的 value 和 grad 函数。"

#: ../../source/quickstart.rst:802
msgid "Templates as Shortcuts"
msgstr "捷径模板"

#: ../../source/quickstart.rst:804
msgid "**Measurements:**"
msgstr "**测量**"

#: ../../source/quickstart.rst:806
msgid "Ising type Hamiltonian defined on a general graph"
msgstr "在一般图上定义的伊辛型哈密顿量"

#: ../../source/quickstart.rst:808
msgid ""
"See "
":py:meth:`tensorcircuit.templates.measurements.spin_glass_measurements`"
msgstr "参考 :py:meth:`tensorcircuit.templates.measurements.spin_glass_measurements`"

#: ../../source/quickstart.rst:810
msgid "Heisenberg Hamiltonian on a general graph with possible external fields"
msgstr "具有可能存在的外场的一般图上的海森堡哈密顿量"

#: ../../source/quickstart.rst:812
msgid ""
"See "
":py:meth:`tensorcircuit.templates.measurements.heisenberg_measurements`"
msgstr "参考 :py:meth:`tensorcircuit.templates.measurements.heisenberg_measurements`"

#: ../../source/quickstart.rst:814
msgid "**Circuit Blocks:**"
msgstr "**电路块**"

#~ msgid "**JIT support:**"
#~ msgstr "**即时编译支持**"

#~ msgid "**VMAP support:**"
#~ msgstr "**向量并行化支持**"

#~ msgid "Install from GitHub"
#~ msgstr "从GitHub安装"

#~ msgid ""
#~ "For beta version usage, one needs "
#~ "to install tensorcircuit package from "
#~ "GitHub. For development and PR workflow,"
#~ " please refer to `contribution "
#~ "<contribution.html>`__ instead."
#~ msgstr ""
#~ "如需使用测试版本，则需要从 GitHub 安装 tensorcircuit。对于开发和 PR"
#~ " 工作流程，请另外参考 `贡献 <contribution.html>`__ 。"

#~ msgid ""
#~ "For private tensorcircuit-dev repo, one"
#~ " needs to first configure the SSH "
#~ "key on GitHub and locally, please "
#~ "refer to `GitHub doc "
#~ "<https://docs.github.com/en/authentication/connecting-to-"
#~ "github-with-ssh>`__"
#~ msgstr ""
#~ "对于私有 tensorcircuit 开发库，首先需要在 GitHub 和本地配置 "
#~ "SSH 密钥, 请参考 `GitHub 文档 "
#~ "<https://docs.github.com/en/authentication/connecting-to-"
#~ "github-with-ssh>`__"

#~ msgid ""
#~ "Then try ``pip3 install --force-"
#~ "reinstall git+ssh://git@github.com/quclub/tensorcircuit-"
#~ "dev.git`` in shell."
#~ msgstr ""
#~ "然后尝试在命令行窗口中输入 ``pip3 install --force-reinstall"
#~ " git+ssh://git@github.com/quclub/tensorcircuit-dev.git`` "
#~ "。"

#~ msgid ""
#~ "Depending on one's need, one may "
#~ "further pip install tensorflow (for "
#~ "TensorFlow backend) or jax and jaxlib"
#~ " (for jax backend) or `cotengra "
#~ "<https://github.com/jcmgray/cotengra>`__ (for more "
#~ "advanced tensornetwork contraction path "
#~ "solver)."
#~ msgstr ""
#~ "基于个人情况，用户可能需要进一步安装 tensorflow, jax 或 jaxlib"
#~ " 或 `cotengra <https://github.com/jcmgray/cotengra>`_"
#~ " 以满足后端要求。"

#~ msgid ""
#~ "If one needs circuit visualization on"
#~ " JupyterLab, python package `wand "
#~ "<https://docs.wand-py.org/en/0.6.7/>`__ and its "
#~ "binary bindings, as well as LaTeX "
#~ "installation, are required."
#~ msgstr ""
#~ "如果需要在 JupyterLab 中进行电路可视化，则需要 python 库  "
#~ "`wand <https://docs.wand-py.org/en/0.6.7/>`__ "
#~ "及其二进制绑定以及 LaTeX 的安装。"

#~ msgid "Import from Qiskit: ``c = tc.Circuit.from_qiskit(QuantumCircuit, n)``"
#~ msgstr "从 Qiskit 导入：``c = tc.Circuit.from_qiskit(QuantumCircuit, n)``"

#~ msgid "For x86 Linux or Mac,"
#~ msgstr ""

#~ msgid ""
#~ "For Mac with M series chips (arm"
#~ " architecture), please refer to `TC "
#~ "on Mac M series "
#~ "<contribs/development_MacARM.html>`_."
#~ msgstr ""

